{
  "openapi": "3.0.3",
  "info": {
    "title": "Renpass.uol",
    "description": "API to manage luxury car rental company",
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "GitHub",
    "url": "https://github.com/felixcandido/Renpass.uol"
  },
  "servers": [
    {
      "url": "http://localhost:3000/",
      "description": "API"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Person": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "cpf": {
            "type": "string",
            "minLength": 11,
            "maxLength": 14
          },
          "birthDay": {
            "type": "string",
            "format": "date"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "canDrive": {
            "type": "string",
            "enum": [
              "yes",
              "no"
            ]
          }
        }
      },
      "Accessories": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          }
        }
      },
      "Vehicles": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "brand": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "year": {
            "type": "number"
          },
          "accessories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Accessories"
            }
          },
          "passengersQtd": {
            "type": "number"
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "cep": {
            "type": "string"
          },
          "number": {
            "type": "string"
          },
          "isFilial": {
            "type": "boolen"
          }
        }
      },
      "Rental": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "cnpj": {
            "type": "string"
          },
          "activities": {
            "type": "string"
          },
          "address": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          }
        }
      }
    }
  },
  "paths": {
    "/api/v1/authenticate": {
      "post": {
        "summary": "authenticate user by email and password",
        "tags": [
          "Authenticate"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/person": {
      "get": {
        "summary": "Search all people",
        "tags": [
          "Person"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query"
          },
          {
            "name": "cpf",
            "in": "query"
          },
          {
            "name": "email",
            "in": "query"
          },
          {
            "name": "canDrive",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "summary": "register a new person",
        "tags": [
          "Person"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/Person"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/v1/person/{id}": {
      "get": {
        "summary": "Search person by id",
        "tags": [
          "Person"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "summary": "update register of one person",
        "tags": [
          "Person"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/Person"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "summary": "delete register of one person",
        "tags": [
          "Person"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "success"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/car": {
      "get": {
        "summary": "Search all cars",
        "tags": [
          "Car"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "model",
            "in": "query"
          },
          {
            "name": "type",
            "in": "query"
          },
          {
            "name": "brand",
            "in": "query"
          },
          {
            "name": "color",
            "in": "query"
          },
          {
            "name": "accessories",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Vehicles"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "summary": "register a new car",
        "tags": [
          "Car"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/Vehicles"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Vehicles"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/car/{id}": {
      "get": {
        "summary": "Search car by id",
        "tags": [
          "Car"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Vehicles"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "summary": "update a car",
        "tags": [
          "Car"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/Vehicles"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "summary": "delete register of one car",
        "tags": [
          "Car"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "success"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/car/{CarId}/accessories/{id}": {
      "patch": {
        "summary": "update registration for a specific accessory",
        "tags": [
          "Car"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "CarId",
            "in": "path",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/Accessories"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/rental": {
      "get": {
        "summary": "Search all rentals",
        "tags": [
          "Rental"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query"
          },
          {
            "name": "cnpj",
            "in": "query"
          },
          {
            "name": "activities",
            "in": "query"
          },
          {
            "name": "zipCode",
            "in": "query"
          },
          {
            "name": "street",
            "in": "query"
          },
          {
            "name": "complement",
            "in": "query"
          },
          {
            "name": "district",
            "in": "query"
          },
          {
            "name": "city",
            "in": "query"
          },
          {
            "name": "state",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Rental"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "summary": "register a new rental",
        "tags": [
          "Rental"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/Rental"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Vehicles"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/v1/rental/{id}": {
      "get": {
        "summary": "Search rental by id",
        "tags": [
          "Rental"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Rental"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "patch": {
        "summary": "update a rental",
        "tags": [
          "Rental"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/Rental"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "summary": "delete register of one rental",
        "tags": [
          "Rental"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "success"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  }
}